---
import BaseLayout from "../layouts/BaseLayout.astro";
import { site } from "../data/site";
import { Icon } from "astro-icon/components";
import { BskyAgent } from "@atproto/api";
import { Image } from "astro:assets";
import heroImg from "../assets/fujisan.jpg";
// Use <Image> for the local hero; keep <img> for remote Bluesky images
const actorHandle = site?.bskyHandle || 'tylerstaut.com';

const pageTitle = `${site.name} — ${site.role}`;

// Fetch recent Bluesky posts server-side and render lightweight cards
type SimplePost = { text: string; createdAt: string; url: string; image?: string };
let posts: SimplePost[] = [];
const extractImage = (embed: any): string | undefined => {
  if (!embed) return undefined;
  const t = embed?.$type || embed?.type;
  if (t?.includes('app.bsky.embed.images')) {
    const img = embed.images?.[0];
    return img?.thumb || img?.fullsize;
  }
  if (t?.includes('app.bsky.embed.external')) {
    return embed.external?.thumb;
  }
  if (t?.includes('app.bsky.embed.recordWithMedia')) {
    return extractImage(embed.media) || extractImage(embed.record?.embed);
  }
  return embed?.images?.[0]?.thumb || embed?.images?.[0]?.fullsize || embed?.external?.thumb;
};
function formatDate(d: string) {
  try {
    return new Date(d).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
  } catch { return ''; }
}
try {
  const service = 'https://public.api.bsky.app';
  // Resolve handle to DID for reliability
  const res = await fetch(`${service}/xrpc/com.atproto.identity.resolveHandle?handle=${encodeURIComponent(actorHandle)}`, { headers: { accept: 'application/json' } });
  const did = res.ok ? (await res.json())?.did || actorHandle : actorHandle;
  const agent = new BskyAgent({ service });
  const feed = await agent.getAuthorFeed({ actor: did, limit: 6, filter: 'posts_no_replies' as any });
  posts = (feed.data?.feed || []).map((item: any) => {
    const post = item?.post || {};
    const rkey = String(post?.uri || '').split('/').pop();
    return {
      text: post?.record?.text || '',
      createdAt: post?.record?.createdAt || '',
      url: post?.author?.handle && rkey ? `https://bsky.app/profile/${post.author.handle}/post/${rkey}` : '',
      image: extractImage(post?.embed),
    } as SimplePost;
  }).filter((p: SimplePost) => !!p.url);
} catch (e) {
  posts = [];
}
---

<BaseLayout title={pageTitle} description={site.tagline} current="home">
  <section class="bento-hero">
    <div class="bento-background">
      <Image src={heroImg} alt="Mount Fuji" class="bento-bg-image" loading="eager" fetchpriority="high" sizes="(max-width: 980px) 100vw, 980px" />
    </div>
    <div class="bento-content">
      <h1>{site.name}</h1>
      <div class="cta">
        <a class="button" href="/projects">Explore Projects</a>
        <a class="button secondary" href="/about">About Me</a>
      </div>
    </div>
  </section>

  <section class="section bsky panel">
    <h2 class="bsky-header">
      <span class="icon"><Icon name="simple-icons:bluesky" width="20" height="20" style="color:#1185fe" /></span>
      <span>From Bluesky</span>
    </h2>
    <p class="bsky-description">
      A peek at my latest posts on
      <a href={"https://bsky.app/profile/" + actorHandle} target="_blank" rel="noopener noreferrer">Bluesky</a>.
    </p>
    <ul class="bsky-list">
      {posts.length
        ? posts.map((p) => (
            <li>
              <a class="bsky-card" href={p.url} target="_blank" rel="noopener noreferrer">
                <div class="bsky-text">{p.text}</div>
                {p.image && <img src={p.image} alt="" width="300" height="200" class="bsky-media" loading="eager" />}
                <div class="bsky-meta">
                  <span class="bsky-date">{formatDate(p.createdAt)}</span>
                  <span class="bsky-cta">View on Bluesky →</span>
                </div>
              </a>
            </li>
          ))
        : <li><p class="muted">No recent Bluesky posts.</p></li>}
    </ul>
  </section>
 </BaseLayout>

<style>
  .bento-hero {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    height: 300px;
    border-radius: 12px;
    overflow: hidden;
    margin-bottom: 2rem;
  }
  .bento-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }
  .bento-bg-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: brightness(0.6);
  }
  .bento-content {
    position: relative;
    z-index: 1;
    color: white;
  }
  .cta {
    display: flex;
    gap: 12px;
    justify-content: center;
    margin-top: 10px;
    flex-wrap: wrap;
  }
  .button {
    display: inline-flex;
    align-items: center;
    gap: .5rem;
    background: var(--text);
    color: #0b0c0f;
    border-radius: 999px;
    padding: .6rem .95rem;
    border: none;
    font-weight: 600;
  }
  .button:hover {
    text-decoration: none;
    background: color-mix(in oklab, var(--text) 92%, white);
  }
  .button.secondary {
    background: transparent;
    color: var(--text);
    border: 1px solid var(--border);
  }
  .button.secondary:hover {
    background: rgba(255,255,255,.06);
    border-color: color-mix(in oklab, var(--text) 20%, transparent);
  }
  /* Motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .button, .card, .project, nav a { transition: none !important; }
  }
  /* Skeletons */
  .bsky-skel { display:none; }
  @keyframes shimmer { 0% { background-position: 200% 0; } 100% { background-position: -200% 0; } }
  /* Bluesky styles */
  .bsky { text-align: left; }
  .bsky-header { display:flex; align-items:center; gap:8px; font-size:22px; justify-content:flex-start; }
  .bsky-description { margin: 0 0 10px; }
  .bsky-description a { color: inherit; text-decoration: underline; }
  /* Masonry-like tiling with CSS columns */
  .bsky-list { list-style: none; padding: 0; margin: 0; columns: 1; column-gap: 12px; max-width: 100%; }
  @media (min-width: 760px) { .bsky-list { columns: 3; } }
  @media (max-width: 759px) { .bsky-list { columns: 1; } }
  .bsky-list > li { break-inside: avoid; -webkit-column-break-inside: avoid; margin: 0 0 12px; }
  /* Keep height similar: show up to 3 cards on wide, 2 on narrow */
  @media (min-width: 760px) { .bsky-list > li:nth-child(n+4) { display: none; } }
  @media (max-width: 759px) { .bsky-list > li:nth-child(n+3) { display: none; } }
  .bsky-card { display:block; text-align:left; padding: 10px 12px; border-radius: 10px; background: var(--surface); border:1px solid var(--border); box-shadow: var(--shadow); color: inherit; text-decoration: none; transition: border-color .15s ease, background .15s ease, transform .15s ease; break-inside: avoid; }
  .bsky-card:hover { border-color: color-mix(in oklab, var(--text) 20%, transparent); background: color-mix(in oklab, var(--surface) 96%, black); transform: translateY(-1px); }
  .bsky-text { margin: 0 0 8px; line-height: 1.45; font-size: .96rem; overflow:hidden; display: -webkit-box; -webkit-line-clamp: 4; -webkit-box-orient: vertical; }
  @media (max-width: 640px) { .bsky-text { -webkit-line-clamp: 5; } }
  .bsky-media { width: 100%; height: auto; border-radius: 8px; border:1px solid var(--border); display:block; margin: 6px 0 8px; }
  .bsky-meta { display:flex; justify-content: space-between; align-items: center; font-size: .85rem; color: var(--muted); margin-top: 2px; }
  .bsky-cta { font-weight: 600; opacity: .9; }
</style>
